<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>

<muclient>
  <plugin
    name="ChannelCapture"
    author="Iasmos"
    id="10c631600800cd4776a75a71"
    language="Lua"
    purpose="Capture channels in a miniwindow"
    date_written="2010-06-28"
    requires="4.51"
    version="1.1"
    save_state="y"
  >
</plugin>

<triggers>
  <trigger
    enabled="y"
    match="^\(.+?\)\: [A-Z][a-z]+ says\, \&quot;[A-Z][a-z]+ has fallen into a pit by me\: .+? \(\d+\)\&quot;"
    regexp="y"
    omit_from_output="y"
    omit_from_log="y"
    sequence="99"
  >
  <send></send>
  </trigger>
  <trigger
    enabled="y"
    match="^\(.+?\)\: .+?\&quot;"
    regexp="y"
    script="chats"
    omit_from_output="y"
    omit_from_log="y"
    sequence="100"
  >
  </trigger>
  <trigger
    enabled="y"
    match="^\&lt;\&lt;.+?\&gt;\&gt;\: .+?\&quot;"
    regexp="y"
    script="chats"
    omit_from_output="y"
    omit_from_log="y"
    sequence="100"
  >
  </trigger>
  <trigger
    enabled="y"
    match="^[A-Z][a-z]+ tells you\, \&quot;.+?\&quot;"
    regexp="y"
    script="chats_tell"
    omit_from_output="y"
    omit_from_log="y"
    sequence="100"
  >
  </trigger>
  <trigger
    enabled="y"
    match="^You tell .+?\, \&quot;.+?\&quot;"
    regexp="y"
    script="chats_tell"
    omit_from_output="y"
    omit_from_log="y"
    sequence="100"
  >
  </trigger>    
  <trigger
    enabled="y"
    match="^[A-Z][a-z]+ tells you\, \&quot;.+?\&quot;"
    regexp="y"
    script="chats"
    omit_from_output="y"
    omit_from_log="y"
    sequence="100"
  >
  </trigger>    
  <trigger
    enabled="y"
    match="^The Divine voice of .+? echoes in your head\, \&quot;.+?\&quot;"
    regexp="y"
    script="chats"
    omit_from_output="y"
    omit_from_log="y"
    sequence="100"
  >
  </trigger>
  <trigger
    enabled="y"
    match="^(You hear through .+?\'s ears\: )[A-Z][a-z]+ says(?:\, in \w+)?\, \&quot;.+?\&quot;"
    regexp="y"
    script="chats_bond"
    omit_from_output="y"
    omit_from_log="y"
    sequence="100"
  >
  </trigger>
</triggers>

<aliases>
  <alias
    script="chat_echo"
    match="^\s*chat\s+echo(?:\s+(on|off))\s*$"
    name="chat_echo_toggle__"
    enabled="y"
    regexp="y"
    sequence="100"
    ignore_case="y"
  >
  </alias>
  <alias
    script="chat_tells"
    match="^\s*chat\s+tells(?:\s+(on|off))\s*$"
    name="chat_tells_toggle__"
    enabled="y"
    regexp="y"
    sequence="100"
    ignore_case="y"
  >
  </alias>

  <alias
    match="^\s*prompt\s+gag\s*$"
    name="chat_prompt_gag__"
    enabled="y"
    regexp="y"
    sequence="100"
    ignore_case="y"
  >
  </alias>
</aliases>

<script>
<![CDATA[

require "movewindow"  -- load the movewindow.lua module
require "copytable"
require "display"

FONT_NAME = "Dina"
FONT_SIZE = 8
SCROLL_BAR_WIDTH = 15
LEFT_MARGIN = 5
RIGHT_MARGIN = 5
MAX_LINES = 10000 -- how many lines to store in scrollback
TITLE_HEIGHT = 17

-- date_format = "[%d %b %H:%M:%S] "        -- [30 Aug 13:29:49]   date and time 24 hour
-- date_format = "[%d %b %I:%M:%S%p] "  -- [30 Aug 01:20:12PM]     date and time 12 hour
-- date_format = "[%H:%M:%S] "          -- [13:29:08]          time 24 hour
-- date_format = "[%X] "                  -- [1:22:06 PM]            time 12 hour

timestamp = GetVariable(GetPluginID().."timestamp")
echo = GetVariable(GetPluginID().."echo")
tells = GetVariable(GetPluginID().."tells")
date_format = GetVariable(GetPluginID().."date_format")
WINDOW_WIDTH = tonumber(GetVariable(GetPluginID().."WINDOW_WIDTH"))
WINDOW_HEIGHT = tonumber(GetVariable(GetPluginID().."WINDOW_HEIGHT"))

-- colours
WINDOW_BACKGROUND_COLOUR = ColourNameToRGB("black")
WINDOW_TEXT_COLOUR = ColourNameToRGB("white")
SCROLL_BACKGROUND_COLOUR = ColourNameToRGB("#E8E8E8")
SCROLL_BAR_COLOUR = ColourNameToRGB("#111111")
SCROLL_DETAIL_COLOUR = ColourNameToRGB("black")
WINDOW_BORDER_COLOUR = ColourNameToRGB("#E8E8E8")

-- offset of text from edge
TEXT_INSET = 5

-- where to store the chat line
lines = {}  -- table of recent chat lines
rawlines = {}

lineStart = ""
lineEnd = ""
WINDOW_COLUMNS = ""
WINDOW_LINES = ""

Win = GetPluginID()
WinResizer = Win.."resize"
font_height = ""
line_height = ""
windowinfo = ""
startx = ""
starty = ""

function InstallResizeTag()
    movewindow.add_drag_handler(WinResizer, 0, 0, 0, 0)
    WindowAddHotspot(WinResizer, "resize", 0, 0, 0, 0, "MouseOver", "CancelMouseOver", "MouseDown", "CancelMouseDown", "MouseUp", "", 6, 0)
    WindowDragHandler(WinResizer, "resize", "ResizeMoveCallback", "ResizeReleaseCallback", 0)
end

function ResizeMoveCallback()
    posx, posy = WindowInfo(WinResizer, 17), WindowInfo(WinResizer, 18)
    if(WindowTextWidth(Win, "font"..Win, "WWWCOMMUNICATION")+2*SCROLL_BAR_WIDTH <= WINDOW_WIDTH+posx-startx) then
        WINDOW_WIDTH = WINDOW_WIDTH+posx-startx
        startx = posx
    end
    if(3*SCROLL_BAR_WIDTH+10+line_height+TITLE_HEIGHT <= WINDOW_HEIGHT+posy-starty) then
        WINDOW_HEIGHT = WINDOW_HEIGHT+posy-starty
        starty = posy
    end
    init(false)
end

function ResizeReleaseCallback()
    WINDOW_HEIGHT = TITLE_HEIGHT+(line_height*(WINDOW_LINES-1))+3
    init(true)
end

function OnPluginInstall()
    -- Dummy window to get font characteristics
    check(WindowCreate(Win, 0, 0, 1, 1, 0, 0, WINDOW_BACKGROUND_COLOUR))
    check(WindowFont(Win, "font"..Win, FONT_NAME, FONT_SIZE))
    font_height = WindowFontInfo(Win, "font"..Win, 1) -  WindowFontInfo(Win, "font"..Win, 4) + 1
    line_height = font_height+1
    font_width = WindowTextWidth(Win, "font"..Win, "W")
    
    -- install the window movement handler, get back the window position
    resizerinfo = movewindow.install(WinResizer, 6, 6, true)
    windowinfo = movewindow.install(Win, 6, 2, true, {WinResizer})

    -- check for Echo/Tells/Timestamp/date_format/window size(in pixels) variables, if not there, set them
    if echo == nil then
        echo = "1"
    end
    if tells == nil then
        tells = "1"
    end
    if timestamp == nil then
        timestamp = "1"
    end
    if date_format == nil then
        date_format = "[%H:%M:%S] "
    end
    if WINDOW_WIDTH == nil then
        WINDOW_WIDTH =(font_width*50)+SCROLL_BAR_WIDTH -- 50 columns
    end
    if WINDOW_HEIGHT == nil then
        WINDOW_HEIGHT = TITLE_HEIGHT+(line_height*8)+2 -- 8 lines
    end
    init(true)
    OnPluginEnable()  -- do initialization stuff
end

function init(firstTime)
    -- how many lines and columns will fit?
    WINDOW_LINES = math.ceil((WINDOW_HEIGHT-TITLE_HEIGHT)/line_height)
    WINDOW_COLUMNS = math.ceil((WINDOW_WIDTH-SCROLL_BAR_WIDTH)/font_width)

    WindowCreate(Win, windowinfo.window_left, windowinfo.window_top, WINDOW_WIDTH, WINDOW_HEIGHT, windowinfo.window_mode, windowinfo.window_flags, WINDOW_BACKGROUND_COLOUR)
    WindowShow(Win, true)
    
    -- catch for right-click menu and line selection
    WindowAddHotspot(Win, "textarea", 0, TITLE_HEIGHT, WINDOW_WIDTH-SCROLL_BAR_WIDTH,0, "", "", "MouseDown", "CancelMouseDown", "MouseUp", "", 2, 0)

    -- add the drag handler so they can move the window around
    movewindow.add_drag_handler(Win, 0, 0, 0, TITLE_HEIGHT)

    -- scroll bar up/down buttons
    WindowAddHotspot(Win, "up", WINDOW_WIDTH-SCROLL_BAR_WIDTH, TITLE_HEIGHT, 0, TITLE_HEIGHT+SCROLL_BAR_WIDTH, "MouseOver", "CancelMouseOver", "MouseDown", "CancelMouseDown", "MouseUp", "", 1, 0)
    WindowAddHotspot(Win, "down", WINDOW_WIDTH-SCROLL_BAR_WIDTH, WINDOW_HEIGHT-(2*SCROLL_BAR_WIDTH), 0, WINDOW_HEIGHT-SCROLL_BAR_WIDTH, "MouseOver", "CancelMouseOver", "MouseDown", "CancelMouseDown", "MouseUp", "", 1, 0)

    -- put the resizer in place
    if(firstTime == true) then
        WindowCreate(WinResizer, windowinfo.window_left+WINDOW_WIDTH-SCROLL_BAR_WIDTH, windowinfo.window_top+WINDOW_HEIGHT-SCROLL_BAR_WIDTH, SCROLL_BAR_WIDTH, SCROLL_BAR_WIDTH, 0, 6, ColourNameToRGB("pink"))
        WindowShow(WinResizer, true)
        InstallResizeTag(WinResizer, SCROLL_BAR_WIDTH)
        lines = {}
        for _,styles in ipairs(rawlines) do 
            fillBuffer(styles)
        end
    else
        WindowPosition(WinResizer, windowinfo.window_left+WINDOW_WIDTH-SCROLL_BAR_WIDTH, windowinfo.window_top+WINDOW_HEIGHT-SCROLL_BAR_WIDTH, 0, 6)
    end

    lineStart = math.max(1, #lines-WINDOW_LINES+2)
    lineEnd = math.max(1, #lines)
    refresh()
end

function OnPluginClose()
    -- if enabled
    if GetPluginInfo(GetPluginID(), 17) then
        OnPluginDisable()
    end -- if enabled
end -- OnPluginClose

function OnPluginEnable()
    WindowShow(Win, true)
    WindowShow(WinResizer, true)
end -- OnPluginEnable

function OnPluginSaveState()
    -- save window current location for next time  
    SetVariable(GetPluginID().."enabled", tostring(GetPluginInfo(GetPluginID(), 17)))
    movewindow.save_state(Win)
    movewindow.save_state(WinResizer)
    -- save echo/timestamp status
    SetVariable(GetPluginID().."echo", echo)
    SetVariable(GetPluginID().."timestamp", timestamp)
    SetVariable(GetPluginID().."date_format", date_format)
    SetVariable(GetPluginID().."WINDOW_WIDTH", WINDOW_WIDTH)
    SetVariable(GetPluginID().."WINDOW_HEIGHT", WINDOW_HEIGHT)
end --  OnPluginSaveState

function OnPluginDisable()
    WindowShow(Win, false)
    WindowShow(WinResizer, false)
end --  OnPluginDisable

-- display one line
function Display_Line(line, styles, backfill)
    local left = TEXT_INSET
    if(backfill) then
        WindowRectOp(Win, 2, 1, TITLE_HEIGHT+(line*line_height)+1, WINDOW_WIDTH-SCROLL_BAR_WIDTH, TITLE_HEIGHT+(line*line_height)+line_height+1, ColourNameToRGB("#333333"))
    end -- backfill
    if(styles) then
        for _, v in ipairs(styles) do
            left = left + WindowText(Win, "font"..Win, v.text, left, TITLE_HEIGHT+(line*line_height), 0, 0, v.textcolour)
        end -- for each style run
    end
    Redraw()
end -- Display_Line

-- display all visible lines
function writeLines()
    for count = lineStart, lineEnd do
        Display_Line( count-lineStart, lines[count][1], false)
    end
end

-- clear and redraw
function refresh()
    WindowRectOp(Win, 2, 0, 0, WINDOW_WIDTH, WINDOW_HEIGHT, WINDOW_BACKGROUND_COLOUR)
    drawStuff()
end
barPos = ""
barSize = ""
totalSteps = ""
function drawStuff()
    -- draw border
    WindowRectOp(Win, 1, 0, 0, 0, 0, WINDOW_BORDER_COLOUR)
    
    -- Title bar
    WindowRectOp(Win, 5, 0, 0, 0, TITLE_HEIGHT, 5,  15 + 0x800)

    -- Title
    WindowText(Win, "font"..Win, "COMMUNICATION",((WINDOW_WIDTH)-(7.5*line_height))/2,(TITLE_HEIGHT-line_height)/2, WINDOW_WIDTH, TITLE_HEIGHT, ColourNameToRGB("black"), false)

    if #lines >= 1 then
        writeLines()
    end -- if
        
    -- Scrollbar base
    WindowRectOp(Win, 2, WINDOW_WIDTH-SCROLL_BAR_WIDTH, TITLE_HEIGHT, WINDOW_WIDTH, WINDOW_HEIGHT, SCROLL_BACKGROUND_COLOUR) -- scroll bar background
    WindowRectOp(Win, 1, WINDOW_WIDTH-SCROLL_BAR_WIDTH+1, SCROLL_BAR_WIDTH+TITLE_HEIGHT+1, WINDOW_WIDTH-1, WINDOW_HEIGHT-(2*SCROLL_BAR_WIDTH)-1, SCROLL_DETAIL_COLOUR) -- scroll bar background inset rectangle
    WindowRectOp(Win, 5,(WINDOW_WIDTH-SCROLL_BAR_WIDTH), TITLE_HEIGHT, WINDOW_WIDTH, TITLE_HEIGHT+SCROLL_BAR_WIDTH, 5, 15 + 0x800) -- top scroll button
    WindowRectOp(Win, 5,(WINDOW_WIDTH-SCROLL_BAR_WIDTH), WINDOW_HEIGHT-(SCROLL_BAR_WIDTH*2), WINDOW_WIDTH, WINDOW_HEIGHT-SCROLL_BAR_WIDTH, 5,  15 + 0x800) -- bottom scroll button

    -- draw triangle in up button
    points = string.format("%i,%i,%i,%i,%i,%i",(WINDOW_WIDTH-SCROLL_BAR_WIDTH)+3, TITLE_HEIGHT+9,(WINDOW_WIDTH-SCROLL_BAR_WIDTH)+7, TITLE_HEIGHT+5,(WINDOW_WIDTH-SCROLL_BAR_WIDTH)+11, TITLE_HEIGHT+9)
    WindowPolygon(Win, points,
        ColourNameToRGB("black"), 0, 1,   -- pen(solid, width 1)
        ColourNameToRGB("black"), 0, --brush(solid)
        true, --close
        false)  --alt fill

    -- draw triangle in down button    
    points = string.format("%i,%i,%i,%i,%i,%i",(WINDOW_WIDTH-SCROLL_BAR_WIDTH)+3,(WINDOW_HEIGHT-SCROLL_BAR_WIDTH)-11,(WINDOW_WIDTH-SCROLL_BAR_WIDTH)+7,(WINDOW_HEIGHT-SCROLL_BAR_WIDTH)-7,(WINDOW_WIDTH-SCROLL_BAR_WIDTH)+11,(WINDOW_HEIGHT-SCROLL_BAR_WIDTH)-11)
    WindowPolygon(Win, points,
        ColourNameToRGB("black"), 0, 1,   -- pen(solid, width 1)
        ColourNameToRGB("black"), 0, --brush(solid)
        true, --close
        false) --alt fill
    
    -- The scrollbar position indicator
    totalSteps = #lines
    if(totalSteps <= WINDOW_LINES-1) then totalSteps = 1 end
    SCROLL_BAR_HEIGHT =(WINDOW_HEIGHT-(3*SCROLL_BAR_WIDTH)-TITLE_HEIGHT)
    if(not dragscrolling) then
        stepNum = lineStart-1
        barPos = SCROLL_BAR_WIDTH +TITLE_HEIGHT+((SCROLL_BAR_HEIGHT/totalSteps) * stepNum)
        barSize =(SCROLL_BAR_HEIGHT/math.max(WINDOW_LINES-1,totalSteps)) *(WINDOW_LINES-1)
        if barSize < 10 then
            barSize = 10
        end
        if barPos+barSize > SCROLL_BAR_WIDTH+TITLE_HEIGHT+SCROLL_BAR_HEIGHT then
            barPos = SCROLL_BAR_WIDTH+TITLE_HEIGHT+SCROLL_BAR_HEIGHT - barSize
        end
        WindowAddHotspot(Win, "scroller",(WINDOW_WIDTH-SCROLL_BAR_WIDTH), barPos, WINDOW_WIDTH, barPos+barSize, "MouseOver", "CancelMouseOver", "MouseDown", "CancelMouseDown", "MouseUp", "", 1, 0)
        WindowDragHandler(Win, "scroller", "ScrollerMoveCallback", "ScrollerReleaseCallback", 0)
    end
    WindowRectOp(Win, 5,(WINDOW_WIDTH-SCROLL_BAR_WIDTH), barPos, WINDOW_WIDTH, barPos+barSize, 5, 15 + 0x800) -- scrollbar position indicator
    
    -- resize tag    
    WindowLine(Win, WINDOW_WIDTH-SCROLL_BAR_WIDTH+1, WINDOW_HEIGHT-2, WINDOW_WIDTH-2, WINDOW_HEIGHT-SCROLL_BAR_WIDTH+1, ColourNameToRGB("white"), 0, 2)
    WindowLine(Win, WINDOW_WIDTH-SCROLL_BAR_WIDTH+2, WINDOW_HEIGHT-2, WINDOW_WIDTH-2, WINDOW_HEIGHT-SCROLL_BAR_WIDTH+2, ColourNameToRGB("dimgray"), 0, 1)
    WindowLine(Win, WINDOW_WIDTH-SCROLL_BAR_WIDTH+4, WINDOW_HEIGHT-2, WINDOW_WIDTH-2, WINDOW_HEIGHT-SCROLL_BAR_WIDTH+4, ColourNameToRGB("white"), 0, 2)
    WindowLine(Win, WINDOW_WIDTH-SCROLL_BAR_WIDTH+5, WINDOW_HEIGHT-2, WINDOW_WIDTH-2, WINDOW_HEIGHT-SCROLL_BAR_WIDTH+5, ColourNameToRGB("dimgray"), 0, 1)
    WindowLine(Win, WINDOW_WIDTH-SCROLL_BAR_WIDTH+7, WINDOW_HEIGHT-2, WINDOW_WIDTH-2, WINDOW_HEIGHT-SCROLL_BAR_WIDTH+7, ColourNameToRGB("white"), 0, 2)
    WindowLine(Win, WINDOW_WIDTH-SCROLL_BAR_WIDTH+8, WINDOW_HEIGHT-2, WINDOW_WIDTH-2, WINDOW_HEIGHT-SCROLL_BAR_WIDTH+8, ColourNameToRGB("dimgray"), 0, 1)
    WindowLine(Win, WINDOW_WIDTH-SCROLL_BAR_WIDTH+10, WINDOW_HEIGHT-2, WINDOW_WIDTH-2, WINDOW_HEIGHT-SCROLL_BAR_WIDTH+10, ColourNameToRGB("white"), 0, 2)
    WindowLine(Win, WINDOW_WIDTH-SCROLL_BAR_WIDTH+11, WINDOW_HEIGHT-2, WINDOW_WIDTH-2, WINDOW_HEIGHT-SCROLL_BAR_WIDTH+11, ColourNameToRGB("dimgray"), 0, 1)

    Redraw()
end

function ScrollerMoveCallback(flags, hotspot_id)
    mouseposy = WindowInfo(Win, 18)
    windowtop = WindowInfo(Win, 2)
    barPos = math.max(mouseposy-windowtop+clickdelta, SCROLL_BAR_WIDTH+TITLE_HEIGHT)
    if barPos > WINDOW_HEIGHT-(SCROLL_BAR_WIDTH*2)-barSize then
        barPos = WINDOW_HEIGHT-(SCROLL_BAR_WIDTH*2)-barSize
        lineStart = math.max(1,#lines-WINDOW_LINES+2)
        lineEnd = #lines
    else
        lineStart = math.floor((barPos-SCROLL_BAR_WIDTH-TITLE_HEIGHT)/(SCROLL_BAR_HEIGHT/totalSteps)+1)
        lineEnd = math.min(lineStart + WINDOW_LINES-2, #lines)
    end
    refresh()
end

function ScrollerReleaseCallback(flags, hotspot_id)
    dragscrolling = false
    refresh()
end

function fillBuffer(rawstyles)
    local avail = 0
    local line_styles
    local beginning = true
    -- keep pulling out styles and trying to fit them on the current line
    local styles = copytable.deep(rawstyles)
    local remove = table.remove
    local insert = table.insert
    while #styles > 0 do
        if avail <= 0 then -- no room available? start new line
            -- remove first line if filled up
            if #lines >= MAX_LINES then
                remove(lines, 1)
            end -- if 
            avail = WINDOW_WIDTH -(TEXT_INSET * 2) - 9
            line_styles = {}
            add_line( line_styles, beginning)
            beginning = false
        end -- line full

        -- get next style, work out how long it is
        local style = remove(styles, 1)
        local width = WindowTextWidth(Win, "font"..Win, style.text)

        -- if it fits, copy whole style in
        if width <= avail then
            insert(line_styles, style)
            avail = avail - width
        else -- otherwise, have to split style   
            -- look for trailing space(work backwards). remember where space is
            local col = style.length - 1
            local split_col
            -- keep going until out of columns
            while col > 1 do
                width = WindowTextWidth(Win, "font"..Win, style.text:sub(1, col)) 
                if width <= avail then
                    if not split_col then
                        split_col = col  -- in case no space found, this is where we can split
                    end -- if
                    -- see if space here
                    if style.text:sub(col, col) == " " then
                        split_col = col
                        break
                    end -- if space
                end -- if will now fit
                col = col - 1
            end -- while
          
            -- if we found a place to split, use old style, and make it shorter. Also make a copy and put the rest in that
            if split_col then
                insert(line_styles, style)
                local style_copy = copytable.shallow(style)
                style.text = style.text:sub(1, split_col)
                style.length = split_col 
                style_copy.text = style_copy.text:sub(split_col + 1)
                style_copy.length = #style_copy.text
                insert(styles, 1, style_copy)
            elseif next(line_styles) == nil then
                insert(line_styles, style)
            else
                insert(styles, 1, style)
            end -- if    
            avail = 0  -- now we need to wrap     
        end -- if could not fit whole thing in
    end -- while we still have styles over
end

function hasmore(text)
  _place = string.find(text, '}')
  _stlen = string.len(text)
  if _place == _stlen then
    return false
  else
    return true
  end
end

function chats_tell(name, line, wildcards, styles)
  if tells == "1" then
    chats(name, line, wildcards, styles)
  else
    for _, v in ipairs(styles) do
        ColourTell(RGBColourToName(v.textcolour),RGBColourToName(v.backcolour),v.text)
    end -- for each style run
    Note("")  -- wrap up line
  end
end

function chats_bond(name, line, wildcards, styles)
  styles[1].text = string.gsub(styles[1].text, wildcards[1], "[BOND] ")
  styles[1].length = string.len(styles[1].text)
  chats(name, line, wildcards, styles)
end

-- Main capture routine
function chats(name, line, wildcards, styles)
--[[
  if not hasmore(styles[1].text) then
    table.remove(styles, 1)  -- get rid of tag
  else
    ttext = styles[1].text
    _place = string.find(ttext, '}')
    if _place then
      styles[1].text = string.sub(ttext, _place + 1)
      styles[1].length = styles[1].length - _place
    end
  end
--]]
  
  -- echo in this world as well if the user wants
  if echo == "1" then
      for _, v in ipairs(styles) do
          ColourTell(RGBColourToName(v.textcolour),RGBColourToName(v.backcolour),v.text)
      end -- for each style run
      Note("")  -- wrap up line
  else
    Execute("prompt gag")
  end -- echo wanted

  -- inject timestamp if wanted
  if timestamp == "1" then
      tstamp = os.date(date_format)
      table.insert(styles, 1, {text = tstamp, length = string.len(tstamp), textcolour = ColourNameToRGB("dimgray")})
  end -- if
  -- store the raw lines for use during resizing
  if #rawlines >= MAX_LINES then
      table.remove(rawlines, 1)
  end
  table.insert(rawlines, styles)
  
  fillBuffer(styles)
  refresh()
end -- chats

function add_line( line, is_beginning_of_message)
    -- add new line
    table.insert(lines, {line, false})
    lines[#lines][2] = is_beginning_of_message

    -- advance the count
    if #lines >= WINDOW_LINES then
        lineStart = lineStart + 1
    end -- if
        
    if #lines > 1 then
        lineEnd = lineEnd + 1
    end -- if
end -- add_line

keepscrolling = false
require "wait"

function scrollbar(calledBy)
    wait.make(function()
        while keepscrolling == true do
            if calledBy == "up" then
                if(lineStart > 1) then
                    lineStart = lineStart - 1
                    lineEnd = lineEnd - 1
                    WindowRectOp(Win, 5,(WINDOW_WIDTH-SCROLL_BAR_WIDTH), TITLE_HEIGHT, 0, TITLE_HEIGHT+SCROLL_BAR_WIDTH, 10,  15 + 0x800) -- up arrow pushed
                    points = string.format("%i,%i,%i,%i,%i,%i",(WINDOW_WIDTH-SCROLL_BAR_WIDTH)+3, TITLE_HEIGHT+9,(WINDOW_WIDTH-SCROLL_BAR_WIDTH)+7, TITLE_HEIGHT+5,(WINDOW_WIDTH-SCROLL_BAR_WIDTH)+11, TITLE_HEIGHT+9)
                    WindowPolygon(Win, points,
                        ColourNameToRGB("black"), 0, 1, -- pen(solid, width 1)
                        ColourNameToRGB("black"), 0, -- brush(solid)
                        true, -- close
                        false) -- alt fill
                else
                    keepscrolling = false
                end
            elseif calledBy == "down" then
                if(lineEnd < #lines) then
                    lineStart = lineStart + 1
                    lineEnd = lineEnd + 1
                WindowRectOp(Win, 5,(WINDOW_WIDTH-SCROLL_BAR_WIDTH), WINDOW_HEIGHT-(SCROLL_BAR_WIDTH*2), 0, WINDOW_HEIGHT-SCROLL_BAR_WIDTH-1, 10,  15 + 0x800) -- down arrow pushed
                points = string.format("%i,%i,%i,%i,%i,%i",(WINDOW_WIDTH-SCROLL_BAR_WIDTH)+3,(WINDOW_HEIGHT-SCROLL_BAR_WIDTH)-11,(WINDOW_WIDTH-SCROLL_BAR_WIDTH)+7,(WINDOW_HEIGHT-SCROLL_BAR_WIDTH)-7,(WINDOW_WIDTH-SCROLL_BAR_WIDTH)+11,(WINDOW_HEIGHT-SCROLL_BAR_WIDTH)-11) -- draw triangle in up button
                WindowPolygon(Win, points,
                    ColourNameToRGB("black"), 0, 1, -- pen(solid, width 1)
                    ColourNameToRGB("black"), 0, -- brush(solid)
                    true, -- close
                    false) -- alt fill
                else
                    keepscrolling = false
                end
            end
            wait.time(0.1)
            refresh()
        end
    end)
end

function GetAllBufferedMessages()
    local t = {}
    for _,styles in ipairs(rawlines) do
        table.insert(t, copytable.deep(styles))
    end
    SetClipboard(table.concat(t,"\r\n"))
end

function GetBufferedMessage(xpos, ypos)
    windowline = math.floor(((ypos-TITLE_HEIGHT)/line_height)+1)-1
    text = ""
    if(#lines > windowline) then
        local line = windowline+lineStart
        -- go to beginning of message
        while lines[line][2] ~= true and line > 1 do
            line = line - 1
        end -- while
        -- first line
        local styles = copytable.deep(lines[line][1])
        if(line-lineStart+1 > 0) then
            Display_Line(line-lineStart, styles, true)
        end
        text = styles
        -- remaining lines
        line = line + 1
        while line <= #lines and lines[line][2] ~= true do
            local styles = copytable.deep(lines[line][1])
            if(line-lineStart+1 > 0 and line-lineStart < WINDOW_LINES) then
                Display_Line(line-lineStart, styles, true)
            end
            text = text..styles
            line = line + 1
        end -- while
        SetClipboard(text)
    end
end

function MouseOver(flags, hotspot_id)
    keepscrolling = false
end

function CancelMouseOver(flags, hotspot_id)
    keepscrolling = false
end

function MouseDown(flags, hotspot_id)
    if(hotspot_id == "resize") then
        startx, starty = WindowInfo(WinResizer, 17), WindowInfo(WinResizer, 18)
    elseif(hotspot_id == "scroller") then
        clickdelta = WindowHotspotInfo(Win, "scroller", 2)-WindowInfo(Win, 15)
        dragscrolling = true
    elseif(hotspot_id == "textarea" and flags == 0x10) then
        GetBufferedMessage(WindowInfo(Win, 14), WindowInfo(Win,15))
    else
        keepscrolling = true
        scrollbar(hotspot_id)
    end
end

function CancelMouseDown(flags, hotspot_id)
    keepscrolling = false
    refresh()
end

function MouseUp(flags, hotspot_id)
    if(hotspot_id == "textarea" and flags == 0x20) then
        -- build menu for current state
        right_click_menu()
    else
        refresh()
    end
    keepscrolling = false
end

function chat_echo(name, line, wildcards)
    if wildcards[1] == false then
        echo = not echo
    elseif wildcards[1]:lower() == " on" then
        echo = "1"
    elseif wildcards[1]:lower() == " off" then
        echo = "0"
    end -- if

    if echo == "1" then
        display.Info("Echoing chats in main window ENABLED.")
    else
        display.Info("Echoing chats in main window DISABLED.")
    end -- if
end -- chat_echo

function chat_tells(name, line, wildcards)
    if wildcards[1] == false then
        tells = not tells
    elseif wildcards[1]:lower() == " on" then
        tells = "1"
    elseif wildcards[1]:lower() == " off" then
        tells = "0"
    end -- if

    if tells == "1" then
        display.Info("Echoing tells in main window ENABLED.")
    else
        display.Info("Echoing tells in main window DISABLED.")
    end -- if
end -- chat_echo

-- right click menu
function right_click_menu()
--    menustring ="Copy All To Clipboard|Change Font"
    menustring = "Change Font"
    if echo == "1" then
        menustring =(menustring .."|Turn Echo Off")
    else
        menustring =(menustring.."|Turn Echo On")
    end --if
    if tells == "1" then
        menustring =(menustring .."|Turn Tells Off")
    else
        menustring =(menustring.."|Turn Tells On")
    end
    if timestamp == "1" then
        menustring =(menustring.."|Turn Timestamp Off")
    else
        menustring =(menustring.."|Turn Timestamp On")
    end -- if
    result = WindowMenu(Win, 
        WindowInfo(Win, 14),  -- x position
        WindowInfo(Win, 15),   -- y position
        menustring) -- content

    if result == "Copy All To Clipboard" then
        GetAllBufferedMessages()
    end

    if result == "Change Font" then
        wanted_font = utils.fontpicker(FONT_NAME, FONT_SIZE) --font dialog
        if wanted_font then
            FONT_NAME = wanted_font.name
            FONT_SIZE = wanted_font.size
            SetVariable(GetPluginID().."font", FONT_NAME)
            SetVariable(GetPluginID().."font_size", FONT_SIZE)
            OnPluginInstall()
        end
    end -- if

    if result == "Turn Echo Off" then
        echo = "0"
        display.Info("Echoing chats in main window DISABLED.")
    end
    if result == "Turn Echo On" then
        echo = "1"
        display.Info("Echoing chats in main window ENABLED.")
    end
    if result == "Turn Tells Off" then
        tells = "0"
        display.Info("Echoing tells in main window DISABLED.")
    end
    if result == "Turn tells On" then
        tells = "1"
        display.Info("Echoing tells in main window ENABLED.")
    end
    if result == "Turn Timestamp Off" then
        timestamp = "0"
        display.Info("Timestamp in communication window DISABLED.")
    end
    if result == "Turn Timestamp On" then
        timestamp = "1"
        subresult = WindowMenu(Win, 
            WindowInfo(Win, 14),  -- x
            WindowInfo(Win, 15),   -- y
            "^FORMAT|30 Aug 13:29:49|30 Aug 01:20:12PM|13:29:08|1:22:06 PM")
        if subresult == "30 Aug 13:29:49" then
            date_format = "[%d %b %H:%M:%S] "
        elseif subresult == "30 Aug 01:20:12PM" then
           date_format = "[%d %b %I:%M:%S%p] "
        elseif subresult == "13:29:08" then
            date_format = "[%H:%M:%S] " 
        elseif subresult == "1:22:06 PM" then
            date_format = "[%I:%M:%S%p] " 
        end
        display.Info("Timestamp in communication window ENABLED.")
    end
end -- right_click_menu
]]>
</script>
</muclient>
